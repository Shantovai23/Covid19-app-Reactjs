{"version":3,"sources":["components/LineGraph.jsx","components/Card.jsx","components/CovidSummary.jsx","axios.js","App.js","index.js"],"names":["LineGraph","props","className","data","labels","label","map","l","substr","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","yaxis","Card","children","CovidSummary","totalConfirmed","totalRecovered","totalDeaths","totalNewConfirmed","totalNewDeaths","country","date","Date","toLocaleDateString","style","textTransform","justifyContent","value","displayType","thousandSeparator","axiosInstance","axios","create","baseURL","App","useState","setTotalConfirmed","setTotalRecovered","setTotalDeaths","newConfirmed","setnewConfirmed","newDeaths","setNewDeaths","loading","setLoading","covidsummary","setcovidsummary","days","setDays","setCountry","coronaCountAr","setCoronaCountAr","setlabel","useEffect","get","then","res","console","log","status","Global","TotalConfirmed","TotalRecovered","TotalDeaths","NewConfirmed","NewDeaths","catch","err","formatDate","d","year","getFullYear","month","getMonth","slice","_date","getDate","getCoronaReportbyDateRange","countryslug","from","to","Cases","xaxis","covidDetails","Countries","find","Slug","onChange","e","target","setDate","key","Country","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1237889.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nconst LineGraph = (props) => {\r\n    return (<>\r\n        <div className='row container-fluid mb-5'>\r\n            <div className='col-md-8 mx-auto mt-5'>\r\n                <Line data={{\r\n                    labels: props.label.map(l => l.substr(0, 10)),\r\n                    datasets: [\r\n                        {\r\n                            label: 'Covid-19 Report',\r\n                            fill: true,\r\n                            lineTension: 0.1,\r\n                            backgroundColor: 'rgba(75,192,192,0.4)',\r\n                            borderColor: 'rgba(75,192,192,1)',\r\n                            borderCapStyle: 'butt',\r\n                            borderDash: [],\r\n                            borderDashOffset: 0.0,\r\n                            borderJoinStyle: 'miter',\r\n                            pointBorderColor: 'rgba(75,192,192,1)',\r\n                            pointBackgroundColor: '#fff',\r\n                            pointBorderWidth: 1,\r\n                            pointHoverRadius: 5,\r\n                            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                            pointHoverBorderWidth: 2,\r\n                            pointRadius: 1,\r\n                            pointHitRadius: 10,\r\n                            data: props.yaxis\r\n                        }\r\n                    ]\r\n                }} />\r\n            </div>\r\n        </div>\r\n    </>)\r\n}\r\nexport default LineGraph","import React from 'react'\r\n\r\nconst Card =(props)=>{\r\n    return(<>\r\n        <div className=' card'>\r\n          {props.children}\r\n        </div>\r\n       \r\n    </>)\r\n}\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\nimport NumberFormat from 'react-number-format'\r\nconst CovidSummary = (props) => {\r\n\r\n  const {\r\n    totalConfirmed,\r\n    totalRecovered,\r\n    totalDeaths,\r\n    totalNewConfirmed,\r\n    totalNewDeaths,\r\n    country\r\n  } = props\r\n  const date = new Date().toLocaleDateString()\r\n  return (<>\r\n    <div className='container-fluid'>\r\n      <div>\r\n        <h1 style={{ textTransform: 'capitalize' }}>{country == '' ? 'World Wide Covid-19 Report' : country}</h1>\r\n        <h1>{date}</h1>\r\n        <div className='row'>\r\n          <div className='col-sm col-md-4 mx-auto' style={{ justifyContent: 'center' }}>\r\n            <Card>\r\n              <span>Total Confirmed</span><br />\r\n              <span>{<NumberFormat value={totalConfirmed} displayType={'text'} thousandSeparator={true} />}</span>\r\n            </Card>\r\n            <Card>\r\n              <span>New Confirmed</span><br />\r\n              <span>{<NumberFormat value={totalNewConfirmed} displayType={'text'} thousandSeparator={true} />}</span>\r\n            </Card>\r\n            <Card>\r\n              <span>Total Recovered</span><br />\r\n              <span>{<NumberFormat value={totalRecovered} displayType={'text'} thousandSeparator={true} />}</span>\r\n            </Card>\r\n            <Card>\r\n              <span>Total Deaths</span><br />\r\n              <span>{<NumberFormat value={totalDeaths} displayType={'text'} thousandSeparator={true} />}</span>\r\n            </Card>\r\n\r\n            <Card>\r\n              <span>New Deaths</span><br />\r\n              <span>{<NumberFormat value={totalNewDeaths} displayType={'text'} thousandSeparator={true} />}</span>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </>)\r\n}\r\nexport default CovidSummary","import axios from 'axios'\r\n\r\nconst axiosInstance=axios.create({\r\n    baseURL: `https://api.covid19api.com/`\r\n})\r\nexport default axiosInstance","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport LineGraph from './components/LineGraph.jsx'\nimport CovidSummary from './components/CovidSummary'\nimport axios from './axios'\n\nfunction App() {\n  const [totalConfirmed, setTotalConfirmed] = useState(0)\n  const [totalRecovered, setTotalRecovered] = useState(0)\n  const [totalDeaths, setTotalDeaths] = useState(0)\n  const [newConfirmed,setnewConfirmed]=useState(0)\n  const [newDeaths,setNewDeaths]=useState(0)\n  const [loading, setLoading] = useState(false)\n  const [covidsummary, setcovidsummary] = useState({})\n  const [days, setDays] = useState(7)\n  const [country, setCountry] = useState('')\n  const [coronaCountAr, setCoronaCountAr] = useState([])\n  const [label, setlabel] = useState([])\n\n  useEffect(() => {\n    setLoading(true)\n    axios.get(`/summary`)\n      .then(res => {\n        setLoading(false)\n        console.log(res);\n\n        if (res.status === 200) {\n          setTotalConfirmed(res.data.Global.TotalConfirmed)\n          setTotalRecovered(res.data.Global.TotalRecovered)\n          setTotalDeaths(res.data.Global.TotalDeaths)\n          setnewConfirmed(res.data.Global.NewConfirmed)\n          setNewDeaths(res.data.Global.NewDeaths)\n          setcovidsummary(res.data)\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }, [])\n\n  const formatDate = (date) => {\n    const d = new Date(date)\n    const year = d.getFullYear()\n    const month = `0${d.getMonth() + 1}`.slice(-2)\n    const _date = `0${d.getDate()}`.slice(-2)\n    return `${year}-${month}-${_date}`\n  }\n\n  const getCoronaReportbyDateRange = (countryslug, from, to) => {\n    axios.get(`/country/${countryslug}/status/confirmed?from=${from}T00:00:00Z&to=${to}T00:00:00Z`)\n      .then(res => {\n        console.log(res);\n        const yaxis = res.data.map(d => d.Cases)\n        const xaxis = res.data.map(d => d.Date)\n        const covidDetails = covidsummary.Countries.find(country => country.Slug === countryslug)\n        setTotalConfirmed(covidDetails.TotalConfirmed)\n        setTotalRecovered(covidDetails.TotalRecovered)\n        setTotalDeaths(covidDetails.TotalDeaths)\n        setnewConfirmed(covidDetails.NewConfirmed)\n        setNewDeaths(covidDetails.NewDeaths)\n        setCoronaCountAr(yaxis)\n        setlabel(xaxis)\n\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n\n  const countryHandler = (e) => {\n    setCountry(e.target.value)\n    const d = new Date()\n    const to = formatDate(d)\n    const from = formatDate(d.setDate(d.getDate() - days))\n\n    console.log(from, to);\n    getCoronaReportbyDateRange(e.target.value, from, to)\n  }\n  const daysHandler = (e) => {\n    const d = new Date()\n    const to = formatDate(d)\n    const from = formatDate(d.setDate(d.getDate() - e.target.value))\n    getCoronaReportbyDateRange(country, from, to)\n    setDays(e.target.value)\n  }\n  if (loading) {\n    return (<><div className=\"loader\"></div><h5>Loading...</h5></>)\n  }\n  return (\n    <div className=\"App\">\n      <CovidSummary\n        totalConfirmed={totalConfirmed}\n        totalRecovered={totalRecovered}\n        totalDeaths={totalDeaths}\n        totalNewConfirmed={newConfirmed}\n        totalNewDeaths={newDeaths}\n        country={country}\n      />\n      <div>\n        <select value={country} onChange={countryHandler}>\n          <option value=''>Select Country</option>\n          {covidsummary.Countries && covidsummary.Countries.map(country =>\n            <option key={country.Slug} value={country.Slug}>{country.Country}</option>\n          )}\n        </select>\n        <select value={days} onChange={daysHandler}>\n          <option value='7'>Last 7 days graph data</option>\n          <option value='30'>Last 30 days graph data</option>\n          <option value='90'>Last 90 days graph data</option>\n        </select>\n      </div>\n      <div className='screen'>\n        <LineGraph yaxis={coronaCountAr}\n          label={label} />\n      </div>\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>,document.getElementById('root'))\n"],"sourceRoot":""}