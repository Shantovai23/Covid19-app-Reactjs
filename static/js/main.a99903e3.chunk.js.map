{"version":3,"sources":["components/LineGraph.jsx","components/Card.jsx","components/CovidSummary.jsx","axios.js","App.js","index.js"],"names":["LineGraph","props","style","width","height","margin","data","labels","label","map","l","substr","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","yaxis","Card","className","children","CovidSummary","totalConfirmed","totalRecovered","totalDeaths","country","date","Date","toLocaleDateString","textTransform","display","justifyContent","value","displayType","thousandSeparator","axiosInstance","axios","create","baseURL","App","useState","setTotalConfirmed","setTotalRecovered","setTotalDeaths","loading","setLoading","covidsummary","setcovidsummary","days","setDays","setCountry","coronaCountAr","setCoronaCountAr","setlabel","useEffect","get","then","res","console","log","status","Global","TotalConfirmed","TotalRecovered","TotalDeaths","catch","err","formatDate","d","year","getFullYear","month","getMonth","slice","_date","getDate","getCoronaReportbyDateRange","countryslug","from","to","Cases","xaxis","covidDetails","Countries","find","Slug","onChange","e","target","setDate","key","Country","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a99903e3.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\n\r\nconst LineGraph = (props) => {\r\n    return (<>\r\n       <div style={{width:'600px',height:'600px',margin:'50px auto'}}>\r\n       <Line data={{\r\n            labels: props.label.map(l=>l.substr(0,10)),\r\n            datasets: [\r\n                {\r\n                    label: 'Covid-19 Report',\r\n                    fill: true,\r\n                    lineTension: 0.1,\r\n                    backgroundColor: 'rgba(75,192,192,0.4)',\r\n                    borderColor: 'rgba(75,192,192,1)',\r\n                    borderCapStyle: 'butt',\r\n                    borderDash: [],\r\n                    borderDashOffset: 0.0,\r\n                    borderJoinStyle: 'miter',\r\n                    pointBorderColor: 'rgba(75,192,192,1)',\r\n                    pointBackgroundColor: '#fff',\r\n                    pointBorderWidth: 1,\r\n                    pointHoverRadius: 5,\r\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                    pointHoverBorderWidth: 2,\r\n                    pointRadius: 1,\r\n                    pointHitRadius: 10,\r\n                    data: props.yaxis\r\n                }\r\n            ]\r\n        }} />\r\n       </div>\r\n    </>)\r\n}\r\nexport default LineGraph","import React from 'react'\r\n\r\nconst Card =(props)=>{\r\n    return(<>\r\n        <div className='card'>\r\n          {props.children}\r\n        </div>\r\n    </>)\r\n}\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\nimport NumberFormat from 'react-number-format'\r\nconst CovidSummary=(props)=>{\r\n     \r\n    const{\r\n        totalConfirmed,\r\n        totalRecovered,\r\n        totalDeaths,\r\n        country\r\n    }=props\r\n    const date=new Date().toLocaleDateString()\r\n    return(<>\r\n        <div>\r\n      <div>\r\n        <h1 style={{textTransform:'capitalize'}}>{country==''? 'World Wide Covid-19 Report' : country}</h1>\r\n        <h1>{date}</h1>\r\n       <div style={{display:'flex',justifyContent:'center'}}>\r\n       <Card>\r\n          <span>Total Confirmed</span><br/>\r\n          <span>{<NumberFormat value={totalConfirmed} displayType={'text'} thousandSeparator={true}/>}</span>\r\n        </Card>\r\n        <Card>\r\n          <span>Total Recovered</span><br/>\r\n          <span>{<NumberFormat value={totalRecovered} displayType={'text'} thousandSeparator={true}/>}</span>\r\n        </Card>\r\n        <Card>\r\n          <span>Total Deaths</span><br/>\r\n          <span>{<NumberFormat value={totalDeaths} displayType={'text'} thousandSeparator={true}/>}</span>\r\n        </Card>\r\n       </div>\r\n      </div>\r\n    </div>\r\n    </>)\r\n}\r\nexport default CovidSummary","import axios from 'axios'\r\n\r\nconst axiosInstance=axios.create({\r\n    baseURL: `https://api.covid19api.com/`\r\n})\r\nexport default axiosInstance","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport LineGraph from './components/LineGraph.jsx'\nimport CovidSummary from './components/CovidSummary'\nimport axios from './axios'\n\nfunction App() {\n  const [totalConfirmed,setTotalConfirmed]=useState(0)\n  const [totalRecovered,setTotalRecovered]=useState(0)\n  const [totalDeaths,setTotalDeaths]=useState(0)\n  const [loading,setLoading]=useState(false)\n  const [covidsummary,setcovidsummary]=useState({})\n  const [days,setDays]=useState(7)\n  const [country,setCountry]=useState('')\n  const [coronaCountAr,setCoronaCountAr]=useState([])\n  const [label,setlabel]=useState([])\n\n  useEffect(()=>{\n    setLoading(true)\n    axios.get(`/summary`)\n    .then(res=>{\n      setLoading(false)\n      console.log(res);\n\n      if(res.status===200){\n        setTotalConfirmed(res.data.Global.TotalConfirmed)\n        setTotalRecovered(res.data.Global.TotalRecovered)\n        setTotalDeaths(res.data.Global.TotalDeaths)\n        setcovidsummary(res.data)\n      }\n    })\n    .catch(err=>{\n      console.log(err);\n    })\n  },[])\n  \n\n  const formatDate=(date)=>{\n      const d=new Date(date)\n      const year=d.getFullYear()\n      const month=`0${d.getMonth()+1}`.slice(-2)\n      const _date=`0${d.getDate()}`.slice(-2)\n      return `${year}-${month}-${_date}`\n  }\n\n\n  const getCoronaReportbyDateRange=(countryslug,from,to)=>{\n    axios.get(`/country/${countryslug}/status/confirmed?from=${from}T00:00:00Z&to=${to}T00:00:00Z`)\n    .then(res=>{\n      console.log(res);\n      const yaxis=res.data.map(d=>d.Cases)\n      const xaxis=res.data.map(d=>d.Date)\n    const covidDetails=covidsummary.Countries.find(country=>country.Slug===countryslug)\n     setTotalConfirmed(covidDetails.TotalConfirmed)\n     setTotalRecovered(covidDetails.TotalRecovered)\n     setTotalDeaths(covidDetails.TotalDeaths)\n      setCoronaCountAr(yaxis)\n      setlabel(xaxis)\n\n    })\n    .catch(err=>{\n      console.log(err);\n    })\n  }\n\n  const countryHandler=(e)=>{\n    setCountry(e.target.value)\n    const d =new Date()\n  const to =formatDate(d)\n  const from= formatDate(d.setDate(d.getDate()-days))\n \n  console.log(from,to);\n  getCoronaReportbyDateRange(e.target.value,from,to)\n  }\n  const daysHandler=(e)=>{\n    const d =new Date()\n    const to =formatDate(d)\n    const from= formatDate(d.setDate(d.getDate()-e.target.value))\n    getCoronaReportbyDateRange(country,from,to)\n    setDays(e.target.value)\n  }\n\n  if(loading){\n    return(<><div className=\"loader\"></div><h5>Loading...</h5></>)\n  }\n\n\n  return (\n    <div className=\"App\">\n    <CovidSummary \n      totalConfirmed={totalConfirmed}\n      totalRecovered={totalRecovered}\n      totalDeaths={totalDeaths}\n      country={country}\n    />\n    <div>\n      <select value={country} onChange={countryHandler}>\n      <option value=''>Select Country</option>\n       {covidsummary.Countries && covidsummary.Countries.map(country=>\n         <option key={country.Slug} value={country.Slug}>{country.Country}</option>\n       )}\n      </select>\n      <select value={days} onChange={daysHandler}>\n        <option value='7'>Last 7 days graph data</option>\n        <option value='30'>Last 30 days graph data</option>\n        <option value='90'>Last 90 days graph data</option>\n      </select>\n    </div>\n       <div className='screen'>\n       <LineGraph yaxis={coronaCountAr}\n      label={label} />\n       </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>,document.getElementById('root'))\n"],"sourceRoot":""}